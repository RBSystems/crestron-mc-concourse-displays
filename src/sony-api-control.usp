/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: Sony-API-Control
System Number: 1.1.0
Programmer: Dan Clegg/David Allred
Comments: Forwards Metrics Events
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Sony Display IP Controller"
#CATEGORY "46" "Sony Displays"
#DEFINE_CONSTANT	BIGGESTSIZE	65534
#DEFINE_CONSTANT	NEWLINE	"\n"
//#OUTPUT_SHIFT 25
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#PRINT_TO_TRACE
#ENABLE_TRACE

/*******************************************************************************************
  DIGITAL_INPUT, ANALOG_INPUT, STRING_INPUT, BUFFER_INPUT inputs and DIGITAL_OUTPUT,
  ANALOG_OUTPUT, STRING_OUTPUT and SERIAL_OUTPUT outputs
*******************************************************************************************/
/*DIGITAL_INPUT actRegister,getApplicationList,getApplicationStatusList,getAudioSourceScreen,
getBannerMode,getBroadcastLinkServerInfo,getBrowserBookmarkList,getColorKeysLayout,
getConflictScheduleList,getContentCount,getContentList,getContentShareServerInfo,
getCurrentExternalInputsStatus,getCurrentTime,getDateTimeFormat,getDeviceMode,getHistoryList,
getInterfaceInformation,getLEDIndicatorStatus,getMethodTypes,getMultiScreenMode,
getNetworkSettings,getParentalRatingSettings,getPhotoList,getPhotoShareServerInfo,
getPipSubScreenPosition,getPlayingContentInfo,getPostalCode,getPowerSavingMode,
getPowerStatus,getPublicKey,getRecordingStatus,getRemoteControllerInfo,
getRemoteDeviceSettings,getSceneSetting;*/
/*DIGITAL_INPUT getScheduleList,getSchemeList,getServiceProtocols,getSoundSettings,
getSourceList,getSpeakerSettings,getSupportedApiInfo,getSupportedRepeatType,
getSystemInformation,getSystemSupportedFunction,getTextForm,getTextUrl,getUserList,
getVersions,getVolumeInformation,getWolMode,playPhotoContent,requestReboot,
requestToNotifyDeviceStatus,requestToNotifyEvent,requestToNotifyScreenState,
requestToNotifySystemInformation,rotatePhoto,sendMessage,setActiveApp,setAudioMute,
setAudioSourceScreen,setAudioVolume,setCurrentTime,setPlayContent,setPlayTvContent,
setPostalCode,setSoundSettings,setSpeakerSettings,togglePlayStatus;*/
//DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_;
DIGITAL_INPUT Poll_Main_Info,Turn_Power_On, Turn_Power_Off, Turn_Mute_On, Turn_Mute_Off,_skip_;
DIGITAL_INPUT Set_TV_Channel, TV_Channel_Up, TV_Channel_Down,_skip_;
DIGITAL_INPUT 	SelectSourceHDMI1,SelectSourceHDMI2,SelectSourceHDMI3,SelectSourceHDMI4,
				SelectSourceVideo1,SelectSourceVideo2,SelectSourceWiDi,SelectSourceTV;

STRING_INPUT	PSK$[32],IPAddress[32],TVChannel[32],parseRx[BIGGESTSIZE];

ANALOG_INPUT 	_SKIP_,NewMajorCH, NewMinorCH;

ANALOG_INPUT	_skip_,_skip_,SetSpeakerVolumeValue,SetHeadphoneVolumeValue;


ANALOG_OUTPUT	SpeakerVolumeValue,HeadphoneVolumeValue,_skip_,MajorCh,MinorCh;

STRING_OUTPUT	SelectedSrcCh$,_skip_,ERR_MSG$;	
STRING_OUTPUT	RX$;

DIGITAL_OUTPUT 	_skip_,PowerIsOn,PowerIsOff,MuteIsOn,MuteIsOff,_skip_,_skip_,_skip_,_skip_,_skip_,
				HDMI1SourceIsSelected,HDMI2SourceIsSelected,HDMI3SourceIsSelected,HDMI4SourceIsSelected,
				Video1SourceIsSelected,Video2SourceIsSelected,WiDiSourceIsSelected,TvSourceIsSelected;

DIGITAL_OUTPUT _SKIP_,ERR, CommErr;

#USER_SIMPLSHARP_LIBRARY "SimplSharpNetUtils"
#USER_SIMPLSHARP_LIBRARY "SimplSharpStringUtils"

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

STRING PSK[32],IP[32],body[1024],TVCH[32],rx[BIGGESTSIZE],rxStr[BIGGESTSIZE],URL[1024],status[16];
INTEGER volume,PowerIsOnGv;

HTTPRequest client;
StringUtils stringUtility;

/*******************************************************************************************
  Functions -- No Editing
*******************************************************************************************/

Function Log(string msg)
{
	Print("\n%s",msg);
}

Function Error(string msg)
{
	Log(msg);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/******************
//
// !!! MOVE ACTIVE SIGNAL EVENTS INTO THIS SECTION !!!
//
******************/


FUNCTION sendMessage(string resource, string body) 
{	
	SIGNED_LONG_INTEGER result;
	STRING resizedResource[50];
//	Print("resource: %s",resource);
//	Print("body: %s",body);
//	Print("URL: %s",URL);
//	Print("PSK: %s",PSK);
	MakeString(resizedResource, "sony/%s",resource);
//	trace("Error exists A: %ld", client.errorExists);
	wait (350, CommErrWait)
	{
		Trace("Communication Error Time Out");
		CommErr = 1;
	}
	result = client.SendCommand(URL, resizedResource, body, PSK);
//	trace("Error exists B: %ld", client.errorExists);
	cancelwait (CommErrWait);
	CommErr = 0;
}

/*
INTEGER_FUNCTION actRegister() // Description
 {
 //method Content
 }
INTEGER_FUNCTION getApplicationList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getApplicationStatusList () // Description
 {

 //method Content
 }
INTEGER_FUNCTION getAudioSourceScreen () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getBannerMode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getBroadcastLinkServerInfo () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getBrowserBookmarkList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getColorKeysLayout () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getConflictScheduleList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getContentCount () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getContentList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getContentShareServerInfo () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getCurrentExternalInputsStatus () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getCurrentTime () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getDateTimeFormat () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getDeviceMode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getHistoryList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getInterfaceInformation () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getLEDIndicatorStatus () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getMethodTypes () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getMultiScreenMode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getNetworkSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getParentalRatingSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getPhotoList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getPhotoShareServerInfo () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getPipSubScreenPosition () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION getPlayingContentInfo () // Description
 {
	string SelectedInput[32],channel[10],Major$[4],Minor$[4];
	body = "{\"id\":103,\"method\":\"getPlayingContentInfo\",\"params\":[],\"version\":\"1.0\"}";
	sendMessage("avContent", body);
//	trace("GetPlayingContent rx: %s",rx);
	SelectedInput = stringUtility.SonyResult(rx, "source");
//	trace("SelectedInput is: %s", SelectedInput);
	if(SelectedInput = "\"tv:atscc\"")
	{
        HDMI1SourceIsSelected = 0;
		HDMI2SourceIsSelected = 0;
		HDMI3SourceIsSelected = 0;
		HDMI4SourceIsSelected = 0;
		Video1SourceIsSelected =0;
		Video2SourceIsSelected = 0;
		WiDiSourceIsSelected = 0;
		TvSourceIsSelected = 1;
		channel = stringUtility.SonyResult(rx, "dispNum");
		Major$ = stringUtility.GetMemberOfStringArray(channel,".",0);
		Minor$ = stringUtility.GetMemberOfStringArray(channel,".",1);
		SelectedSrcCh$ = channel;
		MajorCh = atoi(Major$);
		MinorCh = atoi(Minor$);
	}
	else
	{
		SelectedInput = stringUtility.SonyResult(rx, "title");
//		trace("SelectedInput is: %s", SelectedInput);
		if(SelectedInput = "\"HDMI 1\"")
		{
        	HDMI1SourceIsSelected = 1;
			HDMI2SourceIsSelected = 0;
			HDMI3SourceIsSelected = 0;
			HDMI4SourceIsSelected = 0;
			Video1SourceIsSelected =0;
			Video2SourceIsSelected = 0;
			WiDiSourceIsSelected = 0;
			TvSourceIsSelected = 0;
		}
		else if(SelectedInput = "\"HDMI 2\"")
		{
        	HDMI1SourceIsSelected = 0;
			HDMI2SourceIsSelected = 1;
			HDMI3SourceIsSelected = 0;
			HDMI4SourceIsSelected = 0;
			Video1SourceIsSelected =0;
			Video2SourceIsSelected = 0;
			WiDiSourceIsSelected = 0;
			TvSourceIsSelected = 0;
		}
		else if(SelectedInput = "\"HDMI 3/ARC\"")
		{
        	HDMI1SourceIsSelected = 0;
			HDMI2SourceIsSelected = 0;
			HDMI3SourceIsSelected = 1;
			HDMI4SourceIsSelected = 0;
			Video1SourceIsSelected =0;
			Video2SourceIsSelected = 0;
			WiDiSourceIsSelected = 0;
			TvSourceIsSelected = 0;
		}
		else if(SelectedInput = "\"HDMI 4\"")
		{
        	HDMI1SourceIsSelected = 0;
			HDMI2SourceIsSelected = 0;
			HDMI3SourceIsSelected = 0;
			HDMI4SourceIsSelected = 1;
			Video1SourceIsSelected =0;
			Video2SourceIsSelected = 0;
			WiDiSourceIsSelected = 0;
			TvSourceIsSelected = 0;
		}
		else if(SelectedInput = "\"Video 1\"")
		{
        	HDMI1SourceIsSelected = 0;
			HDMI2SourceIsSelected = 0;
			HDMI3SourceIsSelected = 0;
			HDMI4SourceIsSelected = 0;
			Video1SourceIsSelected =1;
			Video2SourceIsSelected = 0;
			WiDiSourceIsSelected = 0;
			TvSourceIsSelected = 0;
		}
		else if(SelectedInput = "\"Video 2/Component\"")
		{
        	HDMI1SourceIsSelected = 0;
			HDMI2SourceIsSelected = 0;
			HDMI3SourceIsSelected = 0;
			HDMI4SourceIsSelected = 0;
			Video1SourceIsSelected =0;
			Video2SourceIsSelected = 1;
			WiDiSourceIsSelected = 0;
			TvSourceIsSelected = 0;
		}
		else if(SelectedInput = "\"Screen mirroring\"")
		{
        	HDMI1SourceIsSelected = 0;
			HDMI2SourceIsSelected = 0;
			HDMI3SourceIsSelected = 0;
			HDMI4SourceIsSelected = 0;
			Video1SourceIsSelected =0;
			Video2SourceIsSelected = 0;
			WiDiSourceIsSelected = 1;
			TvSourceIsSelected = 0;
		}
   	}
 }
/*
INTEGER_FUNCTION getPostalCode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getPowerSavingMode () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION getPowerStatus () // Description
 {
	string status[16];
	body = "{\"id\":50,\"method\":\"getPowerStatus\",\"params\":[],\"version\":\"1.0\"}";
	SendMessage("system", body);
//	trace("Get Power Rx: %s",rx);
	status = stringUtility.SonyResult(rx, "status");
//	trace("Get Power status: %s", status);
	if (status = "\"active\"")
	{
//		trace("status = active");
		PowerIsOn = 1;
		PowerIsOnGv = 1;
		PowerIsOff = 0;
	}
	else if (status = "\"standby\"")
	{
//		trace("status = standby");
		PowerIsOn = 0;
		PowerIsOnGv = 0;
		PowerIsOff = 1;
	}
	RX$ = status;
 }
INTEGER_FUNCTION setPowerStatus (integer n)	//True or false, 1 for on, 0 for off
 {
	if (n = 1)
	{
		body = "{\"id\":55,\"method\":\"setPowerStatus\",\"params\":[{\"status\":true}],\"version\":\"1.0\"}";
	}
	if (n = 0)
	{
		body = "{\"id\":55,\"method\":\"setPowerStatus\",\"params\":[{\"status\":false}],\"version\":\"1.0\"}";
	}
	sendMessage("system", body);
	wait(10)
	{
		getPowerStatus ();
	}
 }
/*INTEGER_FUNCTION getPublicKey () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getRecordingStatus () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getRemoteControllerInfo () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getRemoteDeviceSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSceneSetting () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getScheduleList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSchemeList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getServiceProtocols () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSoundSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSourceList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSpeakerSettings () // Description
 {
 //method Content
 }*/
FUNCTION getApiInfo () // Description
 {
	body = "{ \"id\": 5, \"method\": \"getSupportedApiInfo\", \"params\": [{ \"services\": [\"system\", \"avContent\", \"guide\", \"accessControl\", \"appControl\", \"audio\", \"avContent\", \"browser\", \"encryption\", \"notification\", \"recording\", \"system\", \"videoScreen\", \"cec\", \"photoshare\", \"broadcastLink\", \"contentshare\",]}], \"version\": \"1.0\"}";
	sendMessage("guide", body);
}
/*
INTEGER_FUNCTION getSupportedRepeatType () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSystemInformation () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSystemSupportedFunction () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getTextForm () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getTextUrl () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getUserList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getVersions () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION getVolumeInformation () // Description
 {
	string status[16],speaker[4],headphone[4];
	integer placeToReturn,numOfReturnedVolumes;
	body = "{\"id\":33,\"method\":\"getVolumeInformation\",\"params\":[],\"version\":\"1.0\"}";
	sendMessage("audio", body);
	status = stringUtility.SonyResult(rx,"volume");
//	place = stringUtility.NumberOfMembers(status,",");
	speaker = stringUtility.GetMemberOfStringArray(status,",",0);
	headphone = stringUtility.GetMemberOfStringArray(status,",",1);
//	TRACE("speaker: %s",speaker);
//	TRACE("headphone: %s", headphone);
//	TRACE("status of volume: %s",status);
	RX$=status;
	SpeakerVolumeValue = atoi(speaker);
	HeadphoneVolumeValue = atoi(headphone);
 }/*
INTEGER_FUNCTION getWolMode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION playPhotoContent () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestReboot () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestToNotifyDeviceStatus () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestToNotifyEvent () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestToNotifyScreenState () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestToNotifySystemInformation () // Description
 {
 //method Content
 }
INTEGER_FUNCTION rotatePhoto () // Description
 {
 //method Content
 }
INTEGER_FUNCTION setActiveApp () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION setAudioMute (integer mute) // 0 for Mute, 1 for unMute
 {
	if (mute = 1)
	{
		body = "{\"id\":601,\"method\":\"setAudioMute\",\"params\":[{\"status\":false}],\"version\":\"1.0\"}";
	}
	if (mute = 0)
	{                                                                                                          
		body = "{\"id\":601,\"method\":\"setAudioMute\",\"params\":[{\"status\":true}],\"version\":\"1.0\"}";
	}
	sendMessage("audio", body);
	wait(10)
		getVolumeInformation ();
 }/*
INTEGER_FUNCTION setAudioSourceScreen () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION setAudioVolume (integer vol) // vol should be between 0 - 100
 {
	makestring (body, "{\"id\":601,\"method\":\"setAudioVolume\",\"params\":[{\"volume\":\"%u\",\"target\":\"speaker\"}],\"version\":\"1.0\"}", vol);
	sendMessage("audio", body);
	wait(10)
		getVolumeInformation ();
 }/*
INTEGER_FUNCTION setCurrentTime () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION setPlayContent (string src$, integer majorCH, integer minorCH) // Description
 {
 	if (src$ = "HDMI1" || src$ = "hdmi1" || src$ = "HDMI 1")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:hdmi?port=1\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "HDMI2" || src$ = "hdmi2" || src$ = "HDMI 2")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:hdmi?port=2\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "HDMI3" || src$ = "hdmi3" || src$ = "HDMI 3/ARC")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:hdmi?port=3\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "HDMI4" || src$ = "hdmi4" || src$ = "HDMI 4")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:hdmi?port=4\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "Video1" || src$ = "Composite" || src$ = "composite")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:composite?port=1\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "Video2" || src$ = "Component" || src$ = "component")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:component?port=1\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "Screen Mirroring" || src$ = "widi")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:widi?port=1\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "TV" || src$ = "tv" || src$ = "atscc" || src$ = "atsc")
	{
		makestring (body, "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"tv:atscc?dispNum=%u.%u&trip=0.%u.%u\"}],\"version\":\"1.0\"}", majorCH, minorCH, majorCH, minorCH);
	}

	sendMessage("avContent", body);
	wait(10)
		getPlayingContentInfo ();
 }
INTEGER_FUNCTION setPlayTvContent (integer UpOrDN)//True or false, 1 for ChanelUp, 0 for ChannelDn 
 {
	if (UpOrDN = 1)
	{
		body = "{\"id\":101,\"method\":\"setPlayTvContent\",\"params\":[{\"channel\":{\"shift\":\"+1\"}}],\"version\":\"1.1\"}";
	}
	if (UpOrDN = 0)
	{
		body = "{\"id\":101,\"method\":\"setPlayTvContent\",\"params\":[{\"channel\":{\"shift\":\"-1\"}}],\"version\":\"1.1\"}";
	}
	sendMessage("avContent", body);
	wait(10)
		getPlayingContentInfo ();
 }/*
INTEGER_FUNCTION setPostalCode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION setSoundSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION setSpeakerSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION togglePlayStatus () // Description
 {
 //method Content
 }
    
*/

/*INTEGER_FUNCTION Audio_Only_Press // Audio Only button on init screen
{
	// Designated Session Start
	StartSession();

	// User Event
	//BuildHttpMessage("touchpanel", "Audio_Only_Press",USER,SESSION);
	BuildHttpMessage("touchpanel", "Audio Only",USER,SESSION);
}*/


/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
// !!!!!!!!! MOVE INACTIVE SIGNAL EVENTS HERE !!!!!!!!!!!!!!

///////
// UNUSED API RESOURCES
///////
//actBrowserControl
//addSchedule
//closeContentShare
//closePhotoShare
//deleteContent
//deleteSchedule
//setBannerMode
//setBgmControlMode
//setCecControlMode
//setConnectionMode
//setCsxUserAccount
//setDeleteProtection
//setDeviceMode
//setFavoriteContentList
//setLanguage
//setLEDIndicatorStatus
//setMhlAutoInputChangeMode
//setMhlPowerFeedMode
//setMultiScreenMode
//setPapScreenSize
//setPipSubScreenPosition
//setPowerSavingMode
//setPowerSyncMode
//setQuickInvitationMode
//setSceneSetting
//setTextForm
//setTextUrl
//setTvContentVisibility
//setUserNickName
//setWolMode
//terminateApps
//voteContent
                                                    
PUSH Turn_Power_On
{
	setPowerStatus (1);	//True or false, 1 for on, 0 for off
}
PUSH Turn_Power_Off
{
	setPowerStatus (0);	//True or false, 1 for on, 0 for off
}
PUSH Turn_Mute_On
{
	setAudioMute (0); // 0 for Mute, 1 for unMute
}
PUSH Turn_Mute_Off
{
	setAudioMute (1); // 0 for Mute, 1 for unMute
}
PUSH Set_TV_Channel
{
	setPlayContent ("TV", NewMajorCH, NewMinorCH);
}
PUSH TV_Channel_Up
{
	setPlayTvContent (1);
}
PUSH TV_Channel_Down
{
	setPlayTvContent (0);
}
PUSH SelectSourceHDMI1
{
	setPlayContent ("HDMI1", NewMajorCH, NewMinorCH);
}
PUSH SelectSourceHDMI2
{
	setPlayContent ("HDMI2", NewMajorCH, NewMinorCH);
}
PUSH SelectSourceHDMI3
{
	setPlayContent ("HDMI3", NewMajorCH, NewMinorCH);
}
PUSH SelectSourceHDMI4
{
	setPlayContent ("HDMI4", NewMajorCH, NewMinorCH);
}
PUSH SelectSourceVideo1
{
	setPlayContent ("Video1", NewMajorCH, NewMinorCH);

}
PUSH SelectSourceVideo2
{
	setPlayContent ("Video2", NewMajorCH, NewMinorCH);
}
PUSH SelectSourceWiDi
{
	setPlayContent ("widi", NewMajorCH, NewMinorCH);
}
PUSH SelectSourceTV
{
	body = "{\"id\": 101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"tv:atscc\"}],\"version\":\"1.0\"}";
	sendMessage("avContent", body);
	wait(10)
		getPlayingContentInfo ();
}
PUSH Poll_Main_Info
{
	getPowerStatus ();
	wait(10)
	{
		if(PowerIsOnGv = 1)
			getPlayingContentInfo ();
	}
	wait(20)
	{
		if(PowerIsOnGv = 1)
			getVolumeInformation ();
    }
}
CHANGE SetSpeakerVolumeValue
{
	integer AudioVolume;
	AudioVolume = setSpeakerVolumeValue;
	setAudioVolume (AudioVolume);
}

// !!!!!!!! SYSTEM SETUP EVENTS -- NO EDITING

CHANGE PSK$
{
	PSK = PSK$;
}

CHANGE IPAddress
{
	IP = IPAddress;
	URL = "http://" + IP;
}

CHANGE parseRx
{
	rx = parseRx;
}

Callback Function OnReceive(String s)
{
	RX$="";
	rxstr = s;
	RX$ = s;
}

Callback Function OnError(String s)
{
	
	trace("Client Error: %s", client.errorMessage);
	rxstr = s;
	ERR_msg$ = s;
	ERR = 1;
}

Function Init()
{
	RegisterDelegate(client,OnResponse,OnReceive);
	RegisterDelegate(client,OnError,OnError);
	PSK = "";
	IP = "";
	PSK = PSK$;
	IP = IPAddress;
	URL = "http://" + IP;
	status = "";
	rx = "";
	ERR = 0;
	CommErr = 0;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    WaitForInitializationComplete();

	Init();
}
