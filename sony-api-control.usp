/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: Sony-API-Control
System Number: 1.1.0
Programmer: Dan Clegg/David Allred
Comments: Forwards Metrics Events
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Sony Display IP Controller"
#CATEGORY "46" "Sony Displays"
#DEFINE_CONSTANT	BIGGESTSIZE	65534
#DEFINE_CONSTANT	NEWLINE	"\n"
//#OUTPUT_SHIFT 25
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#PRINT_TO_TRACE
#ENABLE_TRACE

/*******************************************************************************************
  DIGITAL_INPUT, ANALOG_INPUT, STRING_INPUT, BUFFER_INPUT inputs and DIGITAL_OUTPUT,
  ANALOG_OUTPUT, STRING_OUTPUT and SERIAL_OUTPUT outputs
*******************************************************************************************/
/*DIGITAL_INPUT actRegister,getApplicationList,getApplicationStatusList,getAudioSourceScreen,
getBannerMode,getBroadcastLinkServerInfo,getBrowserBookmarkList,getColorKeysLayout,
getConflictScheduleList,getContentCount,getContentList,getContentShareServerInfo,
getCurrentExternalInputsStatus,getCurrentTime,getDateTimeFormat,getDeviceMode,getHistoryList,
getInterfaceInformation,getLEDIndicatorStatus,getMethodTypes,getMultiScreenMode,
getNetworkSettings,getParentalRatingSettings,getPhotoList,getPhotoShareServerInfo,
getPipSubScreenPosition,getPlayingContentInfo,getPostalCode,getPowerSavingMode,
getPowerStatus,getPublicKey,getRecordingStatus,getRemoteControllerInfo,
getRemoteDeviceSettings,getSceneSetting;*/
/*DIGITAL_INPUT getScheduleList,getSchemeList,getServiceProtocols,getSoundSettings,
getSourceList,getSpeakerSettings,getSupportedApiInfo,getSupportedRepeatType,
getSystemInformation,getSystemSupportedFunction,getTextForm,getTextUrl,getUserList,
getVersions,getVolumeInformation,getWolMode,playPhotoContent,requestReboot,
requestToNotifyDeviceStatus,requestToNotifyEvent,requestToNotifyScreenState,
requestToNotifySystemInformation,rotatePhoto,sendMessage,setActiveApp,setAudioMute,
setAudioSourceScreen,setAudioVolume,setCurrentTime,setPlayContent,setPlayTvContent,
setPostalCode,setSoundSettings,setSpeakerSettings,togglePlayStatus;*/
//DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_;
DIGITAL_INPUT Poll_Main_Info,Turn_Power_On, Turn_Power_Off, Turn_Mute_On, Turn_Mute_Off;
DIGITAL_INPUT Set_TV_Channel, TV_Channel_Up, TV_Channel_Down;

STRING_INPUT	PSK$[32],IPAddress[32],TVChannel[32],parseRx[BIGGESTSIZE];

ANALOG_INPUT 	NewMajorCH, NewMinorCH;

ANALOG_INPUT	_skip_,_skip_,setVolumeValue;


ANALOG_OUTPUT	volumeValue,_skip_,_skip_;

STRING_OUTPUT	ERR_MSG$;	
STRING_OUTPUT	RX$;

DIGITAL_OUTPUT ERR,_SKIP_,_SKIP_;

#USER_SIMPLSHARP_LIBRARY "SimplSharpNetUtils"


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

STRING PSK[32],IP[32],body[1024],TVCH[32],rx[BIGGESTSIZE],URL[1024];
INTEGER volume;

HTTPRequest client;

/*******************************************************************************************
  Functions -- No Editing
*******************************************************************************************/

Function Log(string msg)
{
	Print("\n%s",msg);
}

Function Error(string msg)
{
	Log(msg);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/******************
//
// !!! MOVE ACTIVE SIGNAL EVENTS INTO THIS SECTION !!!
//
******************/


FUNCTION sendMessage(string resource, string body) 
{	
	SIGNED_LONG_INTEGER result;
	Print("resource %s",resource);
Print("body %s",body);
Print("URL %s",URL);
Print("PSK %s",PSK);
	result = client.SendCommand(URL, resource, body, PSK);
}
/*
INTEGER_FUNCTION actRegister() // Description
 {
 //method Content
 }
INTEGER_FUNCTION getApplicationList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getApplicationStatusList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getAudioSourceScreen () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getBannerMode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getBroadcastLinkServerInfo () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getBrowserBookmarkList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getColorKeysLayout () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getConflictScheduleList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getContentCount () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getContentList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getContentShareServerInfo () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getCurrentExternalInputsStatus () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getCurrentTime () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getDateTimeFormat () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getDeviceMode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getHistoryList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getInterfaceInformation () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getLEDIndicatorStatus () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getMethodTypes () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getMultiScreenMode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getNetworkSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getParentalRatingSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getPhotoList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getPhotoShareServerInfo () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getPipSubScreenPosition () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION getPlayingContentInfo () // Description
 {
	body = "{\"id\":103,\"method\":\"getPlayingContentInfo\",\"params\":[],\"version\":\"1.0\"}";
	sendMessage("avContent", body);
 }
/*
INTEGER_FUNCTION getPostalCode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getPowerSavingMode () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION getPowerStatus () // Description
 {
	body = "{\"id\":50,\"method\":\"getPowerStatus\",\"params\":[],\"version\":\"1.0\"}";
	sendMessage("system", body);
 }
INTEGER_FUNCTION setPowerStatus (integer n)	//True or false, 1 for on, 0 for off
 {
	if (n = 1)
	{
		body = "{\"id\":55,\"method\":\"setPowerStatus\",\"params\":[{\"status\":true}],\"version\":\"1.0\"}";
	}
	if (n = 0)
	{
		body = "{\"id\":55,\"method\":\"setPowerStatus\",\"params\":[{\"status\":false}],\"version\":\"1.0\"}";
	}
	Trace("%s",body);
	sendMessage("system", body);
	getPowerStatus ();
 }
/*INTEGER_FUNCTION getPublicKey () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getRecordingStatus () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getRemoteControllerInfo () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getRemoteDeviceSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSceneSetting () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getScheduleList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSchemeList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getServiceProtocols () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSoundSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSourceList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSpeakerSettings () // Description
 {
 //method Content
 }*/
FUNCTION getApiInfo () // Description
 {
	body = "{ \"id\": 5, \"method\": \"getSupportedApiInfo\", \"params\": [{ \"services\": [\"system\", \"avContent\", \"guide\", \"accessControl\", \"appControl\", \"audio\", \"avContent\", \"browser\", \"encryption\", \"notification\", \"recording\", \"system\", \"videoScreen\", \"cec\", \"photoshare\", \"broadcastLink\", \"contentshare\",]}], \"version\": \"1.0\"}";
	sendMessage("guide", body);
}
/*
INTEGER_FUNCTION getSupportedRepeatType () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSystemInformation () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getSystemSupportedFunction () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getTextForm () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getTextUrl () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getUserList () // Description
 {
 //method Content
 }
INTEGER_FUNCTION getVersions () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION getVolumeInformation () // Description
 {
	body = "{\"id\":33,\"method\":\"getVolumeInformation\",\"params\":[],\"version\":\"1.0\"}";
	sendMessage("audio", body);
 }/*
INTEGER_FUNCTION getWolMode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION playPhotoContent () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestReboot () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestToNotifyDeviceStatus () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestToNotifyEvent () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestToNotifyScreenState () // Description
 {
 //method Content
 }
INTEGER_FUNCTION requestToNotifySystemInformation () // Description
 {
 //method Content
 }
INTEGER_FUNCTION rotatePhoto () // Description
 {
 //method Content
 }
INTEGER_FUNCTION setActiveApp () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION setAudioMute (integer mute) // 0 for Mute, 1 for unMute
 {
	if (mute = 1)
	{
		body = "{\"id\":601,\"method\":\"setAudioMute\",\"params\":[{\"status\":false}],\"version\":\"1.0\"}";
	}
	if (mute = 0)
	{                                                                                                          
		body = "{\"id\":601,\"method\":\"setAudioMute\",\"params\":[{\"status\":true}],\"version\":\"1.0\"}";
	}
	sendMessage("audio", body);
	getVolumeInformation ();
 }/*
INTEGER_FUNCTION setAudioSourceScreen () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION setAudioVolume (integer vol) // vol should be between 0 - 100
 {
	makestring (body, "{\"id\":601,\"method\":\"setAudioVolume\",\"params\":[{\"volume\":\"%u\",\"target\":\"speaker\"}],\"version\":\"1.0\"}", vol);
	sendMessage("audio", body);
	getVolumeInformation ();
 }/*
INTEGER_FUNCTION setCurrentTime () // Description
 {
 //method Content
 }*/
INTEGER_FUNCTION setPlayContent (string src$, integer majorCH, integer minorCH) // Description
 {
 	if (src$ = "HDMI1" || src$ = "hdmi1" || src$ = "HDMI 1")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:hdmi?port=1\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "HDMI2" || src$ = "hdmi2" || src$ = "HDMI 2")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:hdmi?port=2\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "HDMI3" || src$ = "hdmi3" || src$ = "HDMI 3/ARC")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:hdmi?port=3\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "HDMI4" || src$ = "hdmi4" || src$ = "HDMI 4")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:hdmi?port=4\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "Video 1" || src$ = "Composite" || src$ = "composite")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:composite?port=1\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "Video 2" || src$ = "Component" || src$ = "component")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:component?port=1\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "Screen Mirroring" || src$ = "widi")
	{
		body = "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"extInput:widi?port=1\"}],\"version\":\"1.0\"}";
	}
	else if (src$ = "TV" || src$ = "tv" || src$ = "atscc" || src$ = "atsc")
	{
		makestring (body, "{\"id\":101,\"method\":\"setPlayContent\",\"params\":[{\"uri\":\"tv:atscc?dispNum=%u.%u&trip=0.%u.%u\"}],\"version\":\"1.0\"}", majorCH, minorCH, majorCH, minorCH);
	}

	sendMessage("avContent", body);
	getPlayingContentInfo ();
 }
INTEGER_FUNCTION setPlayTvContent (integer UpOrDN)//True or false, 1 for ChanelUp, 0 for ChannelDn 
 {
	if (UpOrDN = 1)
	{
		body = "{\"id\":101,\"method\":\"setPlayTvContent\",\"params\":[{\"channel\":{\"shift\":\"+1\"}}],\"version\":\"1.1\"}";
	}
	if (UpOrDN = 0)
	{
		body = "{\"id\":101,\"method\":\"setPlayTvContent\",\"params\":[{\"channel\":{\"shift\":\"-1\"}}],\"version\":\"1.1\"}";
	}
	sendMessage("avContent", body);
	getPlayingContentInfo ();
 }/*
INTEGER_FUNCTION setPostalCode () // Description
 {
 //method Content
 }
INTEGER_FUNCTION setSoundSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION setSpeakerSettings () // Description
 {
 //method Content
 }
INTEGER_FUNCTION togglePlayStatus () // Description
 {
 //method Content
 }
    
*/

/*INTEGER_FUNCTION Audio_Only_Press // Audio Only button on init screen
{
	// Designated Session Start
	StartSession();

	// User Event
	//BuildHttpMessage("touchpanel", "Audio_Only_Press",USER,SESSION);
	BuildHttpMessage("touchpanel", "Audio Only",USER,SESSION);
}*/


/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
// !!!!!!!!! MOVE INACTIVE SIGNAL EVENTS HERE !!!!!!!!!!!!!!

///////
// UNUSED API RESOURCES
///////
//actBrowserControl
//addSchedule
//closeContentShare
//closePhotoShare
//deleteContent
//deleteSchedule
//setBannerMode
//setBgmControlMode
//setCecControlMode
//setConnectionMode
//setCsxUserAccount
//setDeleteProtection
//setDeviceMode
//setFavoriteContentList
//setLanguage
//setLEDIndicatorStatus
//setMhlAutoInputChangeMode
//setMhlPowerFeedMode
//setMultiScreenMode
//setPapScreenSize
//setPipSubScreenPosition
//setPowerSavingMode
//setPowerSyncMode
//setQuickInvitationMode
//setSceneSetting
//setTextForm
//setTextUrl
//setTvContentVisibility
//setUserNickName
//setWolMode
//terminateApps
//voteContent
                                                    
PUSH Turn_Power_On
{
	setPowerStatus (1);	//True or false, 1 for on, 0 for off
}
PUSH Turn_Power_Off
{
	setPowerStatus (0);	//True or false, 1 for on, 0 for off
}
PUSH Turn_Mute_On
{
	setAudioMute (0); // 0 for Mute, 1 for unMute
}
PUSH Turn_Mute_Off
{
	setAudioMute (1); // 0 for Mute, 1 for unMute
}
PUSH Set_TV_Channel
{
	setPlayContent ("TV", NewMajorCH, NewMinorCH);
}
PUSH TV_Channel_Up
{
}
PUSH TV_Channel_Down
{
}
PUSH Poll_Main_Info
{
	getPowerStatus ();
	
	getPlayingContentInfo ();
	getVolumeInformation ();
}
CHANGE setVolumeValue
{
	integer AudioVolume;
	AudioVolume = setVolumeValue;
	setAudioVolume (AudioVolume);
}

// !!!!!!!! SYSTEM SETUP EVENTS -- NO EDITING

CHANGE PSK$
{
	PSK = PSK$;
}

CHANGE IPAddress
{
	IP = IPAddress;
	URL = "http://" + IP;
}

Callback Function OnReceive(String s)
{
	TRACE("On Rx$");
	RX$ = s;
}

Callback Function OnError(String s)
{
	TRACE("On Rx$");
	RX$ = s;
}

Function Init()
{
	RegisterDelegate(client,OnResponse,OnReceive);
	RegisterDelegate(client,OnError,OnError);
	PSK = "";
	IP = "";
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    WaitForInitializationComplete();

	Init();
}
